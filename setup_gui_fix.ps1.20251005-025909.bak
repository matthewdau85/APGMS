$ErrorActionPreference = "Stop"

# --- helpers ---
$Utf8NoBom = New-Object System.Text.UTF8Encoding($false)
function Write-Utf8Lf {
  param([Parameter(Mandatory)][string]$Path,[Parameter(Mandatory)][string]$Content)
  $full = Join-Path (Get-Location) $Path
  $dir  = Split-Path $full
  if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force $dir | Out-Null }
  $lf = $Content -replace "`r`n","`n"
  [IO.File]::WriteAllText($full, $lf, $Utf8NoBom)
}

# --- nginx main (loads conf.d/*.conf) ---
Write-Utf8Lf "ops/nginx.main.conf" @"
user  nginx;
worker_processes  auto;
events { worker_connections 1024; }
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile on; keepalive_timeout 65;
  include /etc/nginx/conf.d/*.conf;
}
"@

# --- site config (proxy /api to normalizer) ---
Write-Utf8Lf "ops/nginx.gui.conf" @"
server {
  listen 80 default_server;
  server_name _;
  root /usr/share/nginx/html;
  index index.html;

  location /api/ {
    proxy_pass http://normalizer:8001/;
    proxy_set_header Host \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  }

  location /prom { return 302 http://prometheus:9090; }
  location /nats  { return 302 http://nats:8222; }

  location / { try_files \$uri /index.html; }
}
"@

# --- minimal customer GUI ---
Write-Utf8Lf "apps/gui/index.html" @"
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title id="title">APGMS Normalizer</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script defer src="/config.js"></script>
  <script defer src="/app.js"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <header class="border-b bg-white">
    <div class="max-w-7xl mx-auto px-4 py-4 flex items-center gap-3">
      <img src="/logo.svg" class="h-8 w-8" alt="logo"/>
      <div>
        <h1 class="text-xl font-semibold" id="brand">APGMS Normalizer</h1>
        <p class="text-sm text-gray-500">Normalize customer events & export results</p>
      </div>
      <nav class="ml-8 hidden md:flex gap-4 text-sm">
        <a class="hover:underline" href="#">Home</a>
        <a class="hover:underline" href="#normalize">Normalize</a>
        <a class="hover:underline" href="#history">History</a>
        <a class="hover:underline" href="#help">Help</a>
      </nav>
      <span id="svcBadge" class="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-700">Checking…</span>
      <a id="docsLink" href="/api/docs" target="_blank" class="text-sm text-blue-600 hover:underline ml-3">API Docs</a>
    </div>
  </header>

  <main class="max-w-7xl mx-auto px-4 py-6 space-y-6">
    <section id="pageHome" class="bg-white rounded-2xl shadow p-5">
      <h2 class="text-lg font-semibold">Welcome</h2>
      <p class="text-sm text-gray-600 mt-1">Normalize customer event files or try a single event.</p>
      <div class="mt-3 flex gap-2">
        <button id="btnReady"   class="px-3 py-1.5 rounded-lg bg-gray-900 text-white text-sm">Check service</button>
        <button id="btnMetrics" class="px-3 py-1.5 rounded-lg bg-gray-200 text-gray-900 text-sm">Preview metrics</button>
        <a href="#normalize" class="px-3 py-1.5 rounded-lg bg-blue-600 text-white text-sm">Normalize data</a>
      </div>
      <pre id="metricsPreview" class="mt-3 text-xs bg-gray-50 p-2 rounded hidden"></pre>
    </section>

    <section id="pageNormalize" class="bg-white rounded-2xl shadow p-5 hidden">
      <h2 class="text-lg font-semibold">Normalize</h2>
      <p class="text-sm text-gray-600">Send a single event or upload a JSON lines file.</p>
      <div class="mt-4 grid md:grid-cols-2 gap-4">
        <div>
          <label class="text-sm font-medium">Single event (JSON)</label>
          <textarea id="singleEvent" class="mt-1 w-full h-40 border rounded-lg px-3 py-2 font-mono text-sm">{}</textarea>
          <button id="btnSendEvent" class="mt-2 px-3 py-1.5 rounded-lg bg-blue-600 text-white text-sm">Send</button>
        </div>
        <div>
          <label class="text-sm font-medium">Bulk file (.jsonl)</label>
          <input id="fileInput" type="file" accept=".jsonl" class="mt-1 w-full border rounded-lg px-3 py-2"/>
          <button id="btnUpload" class="mt-2 px-3 py-1.5 rounded-lg bg-blue-600 text-white text-sm">Upload</button>
          <div class="text-xs text-gray-500 mt-1">Expects one JSON object per line.</div>
        </div>
      </div>
      <div class="mt-4">
        <label class="text-sm font-medium">Response</label>
        <pre id="respView" class="mt-1 w-full h-64 border rounded-lg px-3 py-2 font-mono text-sm overflow-auto bg-gray-50"></pre>
      </div>
    </section>

    <section id="pageHistory" class="bg-white rounded-2xl shadow p-5 hidden">
      <h2 class="text-lg font-semibold">History</h2>
      <p class="text-sm text-gray-600">Recent jobs (placeholder).</p>
      <ul id="jobsList" class="mt-3 space-y-2 text-sm"></ul>
    </section>

    <section id="pageHelp" class="bg-white rounded-2xl shadow p-5 hidden">
      <h2 class="text-lg font-semibold">Help</h2>
      <ul class="list-disc pl-6 text-sm">
        <li><a class="text-blue-600 hover:underline" href="/api/docs" target="_blank">Swagger UI</a></li>
        <li><a class="text-blue-600 hover:underline" href="/prom" target="_blank">Prometheus</a></li>
        <li><a class="text-blue-600 hover:underline" href="/nats" target="_blank">NATS Monitor</a></li>
      </ul>
    </section>
  </main>

  <div id="toast" class="fixed bottom-4 right-4 bg-black text-white text-sm px-3 py-2 rounded-lg hidden"></div>
</body>
</html>
"@

Write-Utf8Lf "apps/gui/app.js" @"
(function () {
  const cfg = window.GUI_CONFIG || {};
  const baseApi = (cfg.baseUrl || "/api").replace(/\/+$/,"");

  const $ = (id) => document.getElementById(id);
  const show = (id) => $(id).classList.remove("hidden");
  const hide = (id) => $(id).classList.add("hidden");

  function route() {
    const hash = (location.hash || "#").replace(/^#/,"");
    const pages = ["pageHome","pageNormalize","pageHistory","pageHelp"];
    pages.forEach(p => hide(p));
    const map = { "": "pageHome", "normalize": "pageNormalize", "history": "pageHistory", "help": "pageHelp" };
    show(map[hash] || "pageHome");
  }
  window.addEventListener("hashchange", route); route();

  // branding
  $("brand").textContent = cfg.brand || "APGMS Normalizer";
  $("title").textContent = cfg.title || "APGMS Normalizer";
  if (cfg.swaggerPath) document.getElementById("docsLink").href = cfg.swaggerPath;

  async function setReadyBadge(ok) {
    const b = $("svcBadge");
    if (ok) { b.textContent="Ready"; b.className="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-green-100 text-green-800"; }
    else    { b.textContent="Not Ready"; b.className="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-red-100 text-red-800"; }
  }
  async function checkReady() {
    try { const r = await fetch(baseApi + "/readyz", {cache:"no-store"}); await setReadyBadge(r.ok); }
    catch { await setReadyBadge(false); }
  }
  document.getElementById("btnReady").onclick = checkReady;
  checkReady();

  document.getElementById("btnMetrics").onclick = async () => {
    const pre = document.getElementById("metricsPreview"); pre.classList.remove("hidden"); pre.textContent = "Loading…";
    try { const r = await fetch(baseApi + "/metrics"); pre.textContent = await r.text(); }
    catch { pre.textContent = "Failed to fetch /metrics"; }
  };

  // Normalize (adjust paths to your API)
  document.getElementById("btnSendEvent").onclick = async () => {
    const out = document.getElementById("respView"); out.textContent = "Sending…";
    let body = document.getElementById("singleEvent").value.trim() || "{}";
    try { JSON.parse(body); } catch { out.textContent = "Body must be valid JSON"; return; }
    try {
      const r = await fetch(baseApi + "/normalize", { method:"POST", headers:{"Content-Type":"application/json"}, body });
      const t = await r.text(); out.textContent = `// HTTP ${r.status}\n` + (t || "");
    } catch(e) { out.textContent = String(e); }
  };

  document.getElementById("btnUpload").onclick = async () => {
    const out = document.getElementById("respView"); const f = document.getElementById("fileInput").files[0];
    if (!f) { out.textContent = "Pick a .jsonl file"; return; }
    out.textContent = "Uploading…";
    try {
      const fd = new FormData(); fd.append("file", f, f.name);
      const r = await fetch(baseApi + "/normalize/bulk", { method:"POST", body: fd });
      const t = await r.text(); out.textContent = `// HTTP ${r.status}\n` + (t || "");
    } catch(e) { out.textContent = String(e); }
  };
})();
"@

# tiny logo
Write-Utf8Lf "apps/gui/logo.svg" "<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 64 64""><rect width=""64"" height=""64"" rx=""12"" fill=""#111""/><path d=""M14 34l10 10 26-26"" stroke=""#fff"" stroke-width=""5"" fill=""none"" stroke-linecap=""round"" stroke-linejoin=""round""/></svg>"

# start.sh writes config.js at runtime
Write-Utf8Lf "apps/gui/start.sh" @"
#!/bin/sh
set -eu
cat >/usr/share/nginx/html/config.js <<CFG
window.GUI_CONFIG = {
  brand: "${GUI_BRAND:-APGMS Normalizer}",
  title: "${GUI_TITLE:-Customer Portal}",
  baseUrl: "${GUI_BASE_URL:-/api}",
  swaggerPath: "${GUI_SWAGGER_PATH:-/api/openapi.json}"
};
CFG
exec nginx -g "daemon off;"
"@

# compose override (note: YAML is just being written, not executed)
Write-Utf8Lf "docker-compose.gui.yaml" @"
services:
  gui:
    image: nginx:alpine
    depends_on:
      - normalizer
    ports:
      - "8088:80"
    environment:
      GUI_BRAND: "APGMS Normalizer"
      GUI_TITLE: "Customer Portal"
      GUI_BASE_URL: "/api"
      GUI_SWAGGER_PATH: "/api/openapi.json"
    volumes:
      - ./apps/gui:/usr/share/nginx/html
      - ./ops/nginx.main.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx.gui.conf:/etc/nginx/conf.d/apgms.conf:ro
    command: /bin/sh -c "chmod +x /usr/share/nginx/html/start.sh && /usr/share/nginx/html/start.sh"
"@

# bring it up
$composeMain = if (Test-Path "docker-compose.yml") { "docker-compose.yml" } elseif (Test-Path "docker-compose.yaml") { "docker-compose.yaml" } else { throw "No docker-compose file found." }
docker compose -f $composeMain -f docker-compose.gui.yaml config | Out-Null
docker compose -f $composeMain -f docker-compose.gui.yaml up -d --force-recreate --remove-orphans
Start-Sleep -Seconds 2
Start-Process "http://localhost:8088"
