$ErrorActionPreference='Stop'
$enc = New-Object System.Text.UTF8Encoding($false)

function Write-Utf8Lf([string]$Path,[string]$Content){
  $full = Join-Path (Get-Location) $Path
  $dir  = Split-Path $full
  if ($dir -and -not (Test-Path $dir)) { New-Item -ItemType Directory -Force $dir | Out-Null }
  $lf = $Content -replace "`r`n","`n"
  [IO.File]::WriteAllText($full,$lf,$enc)
}

# --- NGINX (main + site) ---
Write-Utf8Lf 'ops/nginx.main.conf' @'
user  nginx;
worker_processes  auto;
events { worker_connections 1024; }
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile on; keepalive_timeout 65;
  gzip on; gzip_types text/plain text/css application/json application/javascript image/svg+xml;
  include /etc/nginx/conf.d/*.conf;
}
'@

Write-Utf8Lf 'ops/nginx.gui.conf' @'
server {
  listen 80 default_server;
  server_name _;
  root /usr/share/nginx/html;
  index index.html;

  # SPA routing
  location / {
    try_files $uri /index.html;
  }

  # API proxy to FastAPI "normalizer" service
  location /api/ {
    proxy_pass http://normalizer:8001/;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  # Convenience links
  location /prom { return 302 http://prometheus:9090; }
  location /nats  { return 302 http://nats:8222; }
}
'@

# --- GUI structure ---
$root = 'apps/gui'
if (!(Test-Path $root)) { New-Item -ItemType Directory $root -Force | Out-Null }
New-Item -ItemType Directory "$root/views" -Force | Out-Null
New-Item -ItemType Directory "$root/lib" -Force | Out-Null
New-Item -ItemType Directory "$root/assets" -Force | Out-Null

# Shared logo
Write-Utf8Lf "$root/assets/logo.svg" @'
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#111"/><path d="M14 34l10 10 26-26" stroke="#fff" stroke-width="5" fill="none" stroke-linecap="round" stroke-linejoin="round"/></svg>
'@

# Runtime config (generated by start.sh, but default also shipped)
Write-Utf8Lf "$root/config.js" @'
window.GUI_CONFIG = {
  brand: "APGMS Normalizer",
  title: "Customer Portal",
  baseUrl: "/api",
  swaggerPath: "/api/openapi.json",
  links: { docs: "/api/docs", prom: "/prom", nats: "/nats" },
  features: { connections: true, history: true, rules: true, schemas: true, admin: true }
};
'@

# Utilities
Write-Utf8Lf "$root/lib/utils.js" @'
export const $ = (sel, root=document) => root.querySelector(sel);
export const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));
export const pretty = (v) => { try { return JSON.stringify(typeof v==="string"?JSON.parse(v):v, null, 2); } catch { return String(v); } };
export const toast = (msg, ok=true) => {
  const t = $("#toast"); if (!t) return;
  t.textContent = msg; t.className = "fixed bottom-4 right-4 text-white text-sm px-3 py-2 rounded-lg " + (ok?"bg-black":"bg-red-600");
  t.classList.remove("hidden");
  setTimeout(() => t.classList.add("hidden"), 2600);
};
export const saveLocal = (k,v)=>localStorage.setItem(k,JSON.stringify(v));
export const loadLocal = (k,d=null)=>{ try{ const v=localStorage.getItem(k); return v?JSON.parse(v):d }catch{ return d } };
export const api = async (path, opts={}) => {
  const base = (window.GUI_CONFIG?.baseUrl||"/api").replace(/\/+$/,"");
  const res = await fetch(base + path, opts);
  const text = await res.text();
  const body = (()=>{ try{ return JSON.parse(text) } catch { return text }})();
  return { ok: res.ok, status: res.status, body, raw: text, headers: res.headers };
};
'@

# Client-side router
Write-Utf8Lf "$root/lib/router.js" @'
const listeners = new Set();
export const routeTo = (hash) => { location.hash = hash; };
export const onRoute = (fn) => { listeners.add(fn); return () => listeners.delete(fn); };
const notify = () => { const r=(location.hash||"#/").replace(/^#/,""); listeners.forEach(fn=>fn(r)); };
window.addEventListener("hashchange", notify);
export const startRouter = () => { if (!location.hash) location.hash = "#/"; notify(); };
'@

# Index (layout + mount point)
Write-Utf8Lf "$root/index.html" @'
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title id="title">Customer Portal</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script defer src="/config.js"></script>
  <script type="module" defer src="/main.js"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <header class="border-b bg-white">
    <div class="max-w-7xl mx-auto px-4 py-4 flex items-center gap-3">
      <img src="/assets/logo.svg" class="h-8 w-8" alt="logo"/>
      <div>
        <h1 class="text-xl font-semibold" id="brand">APGMS Normalizer</h1>
        <p class="text-sm text-gray-500">Normalize events & monitor the service</p>
      </div>
      <nav class="ml-8 hidden md:flex gap-4 text-sm">
        <a class="hover:underline" href="#/">Dashboard</a>
        <a class="hover:underline" href="#/normalize">Normalize</a>
        <a class="hover:underline" href="#/results">Results</a>
        <a class="hover:underline" href="#/history">History</a>
        <a class="hover:underline" href="#/rules">Rules</a>
        <a class="hover:underline" href="#/schemas">Schemas</a>
        <a class="hover:underline" href="#/connections">Connections</a>
        <a class="hover:underline" href="#/admin">Settings</a>
      </nav>
      <span id="svcBadge" class="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-700">Checkingâ€¦</span>
      <a id="docsLink" href="/api/docs" target="_blank" class="text-sm text-blue-600 hover:underline ml-3">API Docs</a>
    </div>
  </header>

  <main class="max-w-7xl mx-auto px-4 py-6">
    <div id="app"></div>
  </main>

  <footer class="border-t bg-white">
    <div class="max-w-7xl mx-auto px-4 py-3 text-xs text-gray-500 flex gap-4">
      <a class="text-blue-600 hover:underline" href="/prom" target="_blank">Prometheus</a>
      <a class="text-blue-600 hover:underline" href="/nats" target="_blank">NATS</a>
      <span class="ml-auto">Â© <span id="brandFoot">APGMS Normalizer</span></span>
    </div>
  </footer>

  <div id="toast" class="fixed bottom-4 right-4 bg-black text-white text-sm px-3 py-2 rounded-lg hidden"></div>
</body>
</html>
'@

# Main entry: mounts brand + router + page registry
Write-Utf8Lf "$root/main.js" @'
import { api } from "./lib/utils.js";
import { startRouter, onRoute } from "./lib/router.js";
import Dashboard from "./views/Dashboard.js";
import Normalize from "./views/Normalize.js";
import Results from "./views/Results.js";
import History from "./views/History.js";
import Rules from "./views/Rules.js";
import Schemas from "./views/Schemas.js";
import Connections from "./views/Connections.js";
import Admin from "./views/Admin.js";

const routes = new Map([
  ["/", Dashboard],
  ["/normalize", Normalize],
  ["/results", Results],
  ["/history", History],
  ["/rules", Rules],
  ["/schemas", Schemas],
  ["/connections", Connections],
  ["/admin", Admin],
]);

function setBranding() {
  const cfg = window.GUI_CONFIG || {};
  document.getElementById("brand").textContent = cfg.brand || "APGMS Normalizer";
  document.getElementById("brandFoot").textContent = cfg.brand || "APGMS Normalizer";
  document.getElementById("title").textContent = cfg.title || "Customer Portal";
  if (cfg.links?.docs) document.getElementById("docsLink").href = cfg.links.docs;
}
setBranding();

async function updateReadyBadge() {
  const badge = document.getElementById("svcBadge");
  try {
    const r = await fetch((window.GUI_CONFIG?.baseUrl||"/api").replace(/\/+$/,"") + "/readyz",{cache:"no-store"});
    if (r.ok) { badge.textContent="Ready"; badge.className="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-green-100 text-green-800"; }
    else { badge.textContent="Not Ready"; badge.className="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-red-100 text-red-800"; }
  } catch {
    badge.textContent="Unreachable"; badge.className="ml-auto inline-flex items-center px-2 py-1 text-xs rounded-full bg-red-100 text-red-800";
  }
}
updateReadyBadge();

const app = document.getElementById("app");

onRoute(async (hashPath) => {
  const path = hashPath.split("?")[0] || "/";
  const View = routes.get(path) || Dashboard;
  app.innerHTML = "";
  const el = document.createElement("div");
  el.className = "space-y-6";
  app.appendChild(el);
  const dispose = await View(el);
  // dispose can be used later if needed per page
});

startRouter();
'@

# ---- Views ----

# Dashboard
Write-Utf8Lf "$root/views/Dashboard.js" @'
import { api, pretty } from "../lib/utils.js";

export default async function Dashboard(root){
  root.innerHTML = `
    <section class="bg-white rounded-2xl shadow p-5">
      <h2 class="text-lg font-semibold">Overview</h2>
      <p class="text-sm text-gray-600">Service status, quick stats & shortcuts.</p>
      <div class="mt-4 grid md:grid-cols-3 gap-4" id="cards">
        <div class="p-4 border rounded-xl"><div class="text-xs text-gray-500">Health</div><div id="card-health" class="text-2xl">â€“</div></div>
        <div class="p-4 border rounded-xl"><div class="text-xs text-gray-500">Jobs (24h)</div><div id="card-jobs" class="text-2xl">â€“</div></div>
        <div class="p-4 border rounded-xl"><div class="text-xs text-gray-500">Success rate</div><div id="card-success" class="text-2xl">â€“</div></div>
      </div>
      <div class="mt-4">
        <button id="btnMetrics" class="px-3 py-1.5 rounded-lg bg-gray-200 text-gray-900 text-sm">Preview metrics</button>
        <pre id="metricsPreview" class="mt-3 text-xs bg-gray-50 p-2 rounded hidden"></pre>
      </div>
    </section>
  `;

  document.getElementById("btnMetrics").onclick = async ()=>{
    const pre = document.getElementById("metricsPreview");
    pre.classList.remove("hidden"); pre.textContent = "Loadingâ€¦";
    try { const r = await api("/metrics"); pre.textContent = typeof r.body==="string"? r.body : pretty(r.body); }
    catch { pre.textContent = "Failed to fetch /metrics"; }
  };

  // Optional stats endpoints (/jobs/summary is hypothetical â€“ adjust to your API)
  try {
    const ready = await fetch((window.GUI_CONFIG?.baseUrl||"/api").replace(/\/+$/,"")+"/readyz");
    document.getElementById("card-health").textContent = ready.ok ? "Ready" : "Not Ready";
  } catch { document.getElementById("card-health").textContent = "Unreachable"; }

  try {
    const { ok, body } = await api("/jobs/summary?range=24h");
    if (ok && body) {
      document.getElementById("card-jobs").textContent = body.total ?? "â€“";
      const rate = body.success_rate!=null ? Math.round(body.success_rate*100)+"%" : "â€“";
      document.getElementById("card-success").textContent = rate;
    }
  } catch {}
}
'@

# Normalize
Write-Utf8Lf "$root/views/Normalize.js" @'
import { api, pretty, toast } from "../lib/utils.js";

export default async function Normalize(root){
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">Normalize</h2>
    <p class="text-sm text-gray-600">Send a single event or upload a JSON lines file.</p>
    <div class="mt-4 grid md:grid-cols-2 gap-4">
      <div>
        <label class="text-sm font-medium">Single event (JSON)</label>
        <textarea id="singleEvent" class="mt-1 w-full h-48 border rounded-lg px-3 py-2 font-mono text-sm">{}</textarea>
        <button id="btnSendEvent" class="mt-2 px-3 py-1.5 rounded-lg bg-blue-600 text-white text-sm">Send</button>
      </div>
      <div>
        <label class="text-sm font-medium">Bulk file (.jsonl)</label>
        <input id="fileInput" type="file" accept=".jsonl" class="mt-1 w-full border rounded-lg px-3 py-2"/>
        <button id="btnUpload" class="mt-2 px-3 py-1.5 rounded-lg bg-blue-600 text-white text-sm">Upload</button>
        <div class="text-xs text-gray-500 mt-1">Expects one JSON object per line.</div>
      </div>
    </div>
    <div class="mt-4">
      <label class="text-sm font-medium">Response</label>
      <pre id="respView" class="mt-1 w-full h-64 border rounded-lg px-3 py-2 font-mono text-sm overflow-auto bg-gray-50"></pre>
    </div>
  </section>`;

  document.getElementById("btnSendEvent").onclick = async () => {
    const out = document.getElementById("respView"); out.textContent = "Sendingâ€¦";
    let body = document.getElementById("singleEvent").value.trim() || "{}";
    try { JSON.parse(body); } catch { out.textContent = "Body must be valid JSON"; return; }
    const { ok, status, raw } = await api("/normalize", { method:"POST", headers:{"Content-Type":"application/json"}, body });
    out.textContent = `// HTTP ${status}\n` + (raw||"");
    toast(ok?"Sent":"Failed", ok);
  };

  document.getElementById("btnUpload").onclick = async () => {
    const out = document.getElementById("respView"); const f = document.getElementById("fileInput").files[0];
    if (!f) { out.textContent = "Pick a .jsonl file"; return; }
    out.textContent = "Uploadingâ€¦";
    const fd = new FormData(); fd.append("file", f, f.name);
    const { ok, status, raw } = await api("/normalize/bulk", { method:"POST", body: fd });
    out.textContent = `// HTTP ${status}\n` + (raw||"");
    toast(ok?"Uploaded":"Failed", ok);
  };
}
'@

# Results
Write-Utf8Lf "$root/views/Results.js" @'
import { api, pretty } from "../lib/utils.js";

export default async function Results(root){
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">Results</h2>
    <div class="mt-3 flex gap-2">
      <input id="resId" class="border rounded px-3 py-2 text-sm" placeholder="Job ID or Result ID"/>
      <button id="btnFetch" class="px-3 py-2 rounded bg-gray-900 text-white text-sm">Fetch</button>
    </div>
    <pre id="out" class="mt-3 text-xs bg-gray-50 p-2 rounded h-96 overflow-auto"></pre>
  </section>`;

  document.getElementById("btnFetch").onclick = async ()=>{
    const id = document.getElementById("resId").value.trim();
    if (!id) { document.getElementById("out").textContent="Enter an ID"; return; }
    // Try results first; fallback to jobs
    let r = await api(`/results/${encodeURIComponent(id)}`);
    if (!r.ok) r = await api(`/jobs/${encodeURIComponent(id)}`);
    document.getElementById("out").textContent = r.ok ? pretty(r.body) : `// HTTP ${r.status}\n` + (r.raw||"");
  };
}
'@

# History
Write-Utf8Lf "$root/views/History.js" @'
import { api, pretty } from "../lib/utils.js";

export default async function History(root){
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">History</h2>
    <div class="mt-3 flex gap-2">
      <input id="q" class="border rounded px-3 py-2 text-sm" placeholder="Filter (status, type, customer)â€¦"/>
      <button id="btnReload" class="px-3 py-2 rounded bg-gray-900 text-white text-sm">Reload</button>
    </div>
    <table class="mt-3 w-full text-sm">
      <thead><tr class="text-left text-gray-500">
        <th class="py-2">ID</th><th>Created</th><th>Status</th><th>Count</th><th></th>
      </tr></thead>
      <tbody id="rows"></tbody>
    </table>
  </section>`;

  async function load(){
    const q = document.getElementById("q").value.trim();
    const { ok, body } = await api(`/jobs${q?`?q=${encodeURIComponent(q)}`:""}`);
    const rows = document.getElementById("rows"); rows.innerHTML = "";
    if (ok && Array.isArray(body)) {
      for (const j of body) {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td class="py-1">${j.id||"â€”"}</td>
          <td>${j.created_at||"â€”"}</td>
          <td>${j.status||"â€”"}</td>
          <td>${j.count??"â€”"}</td>
          <td><a class="text-blue-600 hover:underline" href="#/results?id=${encodeURIComponent(j.id||"")}">View</a></td>`;
        rows.appendChild(tr);
      }
    } else {
      rows.innerHTML = `<tr><td class="py-2 text-red-600" colspan="5">No data</td></tr>`;
    }
  }
  document.getElementById("btnReload").onclick = load;
  load();
}
'@

# Rules
Write-Utf8Lf "$root/views/Rules.js" @'
import { api, pretty, toast } from "../lib/utils.js";

export default async function Rules(root){
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">Rules</h2>
    <div class="mt-3 flex gap-2">
      <button id="btnReload" class="px-3 py-2 rounded bg-gray-900 text-white text-sm">Reload</button>
      <button id="btnCreate" class="px-3 py-2 rounded bg-blue-600 text-white text-sm">Create</button>
    </div>
    <table class="mt-3 w-full text-sm">
      <thead><tr class="text-left text-gray-500"><th class="py-2">Name</th><th>Version</th><th>Updated</th><th></th></tr></thead>
      <tbody id="rows"></tbody>
    </table>
    <dialog id="dlg" class="p-0 rounded-xl">
      <form method="dialog" class="p-4 w-[560px] max-w-[95vw]">
        <h3 class="text-base font-semibold">Rule</h3>
        <label class="block mt-2 text-sm">Name<input id="rName" class="mt-1 w-full border rounded px-2 py-1"/></label>
        <label class="block mt-2 text-sm">JSON<textarea id="rBody" class="mt-1 w-full h-48 border rounded px-2 py-1 font-mono text-xs">{}</textarea></label>
        <div class="mt-3 flex gap-2 justify-end">
          <button id="save" value="save" class="px-3 py-1.5 rounded bg-blue-600 text-white text-sm">Save</button>
          <button id="cancel" value="cancel" class="px-3 py-1.5 rounded bg-gray-200 text-gray-900 text-sm">Cancel</button>
        </div>
      </form>
    </dialog>
  </section>`;

  const rows = document.getElementById("rows");
  async function reload(){
    rows.innerHTML = "";
    const { ok, body } = await api("/rules");
    if (ok && Array.isArray(body)) {
      for (const r of body) {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td class="py-1">${r.name||"â€”"}</td><td>${r.version??"â€”"}</td><td>${r.updated_at||"â€”"}</td>
        <td class="space-x-3">
          <a href="#" data-name="${r.name}" class="text-blue-600 act-edit">Edit</a>
          <a href="#" data-name="${r.name}" class="text-red-600 act-del">Delete</a>
        </td>`;
        rows.appendChild(tr);
      }
    } else {
      rows.innerHTML = `<tr><td class="py-2 text-red-600" colspan="4">No rules</td></tr>`;
    }
  }
  document.getElementById("btnReload").onclick = reload;
  reload();

  const dlg = document.getElementById("dlg");
  document.getElementById("btnCreate").onclick = ()=>{ document.getElementById("rName").value=""; document.getElementById("rBody").value="{}"; dlg.showModal(); };

  rows.addEventListener("click", async (e)=>{
    const a = e.target.closest("a"); if (!a) return;
    e.preventDefault();
    const name = a.dataset.name;
    if (a.classList.contains("act-edit")) {
      const r = await api(`/rules/${encodeURIComponent(name)}`);
      document.getElementById("rName").value = name;
      document.getElementById("rBody").value = pretty(r.body||{});
      dlg.showModal();
    } else if (a.classList.contains("act-del")) {
      if (!confirm(`Delete rule "${name}"?`)) return;
      const d = await api(`/rules/${encodeURIComponent(name)}`, { method:"DELETE" });
      toast(d.ok?"Deleted":"Failed", d.ok); reload();
    }
  });

  dlg.addEventListener("close", async ()=>{
    if (dlg.returnValue==="save") {
      const name = document.getElementById("rName").value.trim();
      const body = document.getElementById("rBody").value;
      try { JSON.parse(body) } catch { toast("Invalid JSON", false); return; }
      const m = await api(`/rules/${encodeURIComponent(name)}`, { method:"PUT", headers:{ "Content-Type":"application/json" }, body });
      toast(m.ok?"Saved":"Failed", m.ok); reload();
    }
  });
}
'@

# Schemas
Write-Utf8Lf "$root/views/Schemas.js" @'
import { api, pretty } from "../lib/utils.js";

export default async function Schemas(root){
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">Schemas</h2>
    <div class="mt-3 flex gap-2">
      <button id="btnReload" class="px-3 py-2 rounded bg-gray-900 text-white text-sm">Reload</button>
    </div>
    <ul id="list" class="mt-3 space-y-2 text-sm"></ul>
    <pre id="view" class="mt-3 text-xs bg-gray-50 p-2 rounded h-96 overflow-auto"></pre>
  </section>`;

  const list = document.getElementById("list");
  document.getElementById("btnReload").onclick = load;
  load();

  async function load(){
    list.innerHTML = "<li>Loadingâ€¦</li>";
    const { ok, body } = await api("/schemas");
    if (ok && Array.isArray(body)) {
      list.innerHTML = "";
      for (const s of body) {
        const li = document.createElement("li");
        li.innerHTML = `<a href="#" class="text-blue-600 hover:underline" data-id="${s.id||s.name}">${s.name||s.id}</a>`;
        list.appendChild(li);
      }
    } else list.innerHTML = "<li>None</li>";
  }

  list.addEventListener("click", async (e)=>{
    const a = e.target.closest("a"); if (!a) return;
    e.preventDefault();
    const id = a.dataset.id;
    const r = await api(`/schemas/${encodeURIComponent(id)}`);
    document.getElementById("view").textContent = r.ok ? pretty(r.body) : `// HTTP ${r.status}\n`+(r.raw||"");
  });
}
'@

# Connections
Write-Utf8Lf "$root/views/Connections.js" @'
import { api, pretty } from "../lib/utils.js";

export default async function Connections(root){
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">Connections</h2>
    <p class="text-sm text-gray-600">Messaging / stream backends.</p>
    <div class="mt-3 grid md:grid-cols-2 gap-4">
      <div class="p-4 border rounded-xl"><div class="text-xs text-gray-500">NATS</div><pre id="nats" class="text-xs mt-2 bg-gray-50 p-2 rounded h-60 overflow-auto"></pre></div>
      <div class="p-4 border rounded-xl"><div class="text-xs text-gray-500">Streams</div><pre id="streams" class="text-xs mt-2 bg-gray-50 p-2 rounded h-60 overflow-auto"></pre></div>
    </div>
  </section>`;

  try { const r = await api("/connections/nats"); document.getElementById("nats").textContent = r.ok? pretty(r.body): (r.raw||""); } catch {}
  try { const r = await api("/connections/streams"); document.getElementById("streams").textContent = r.ok? pretty(r.body): (r.raw||""); } catch {}
}
'@

# Admin / Settings
Write-Utf8Lf "$root/views/Admin.js" @'
import { loadLocal, saveLocal, toast } from "../lib/utils.js";

export default async function Admin(root){
  const cfg = window.GUI_CONFIG || {};
  const saved = loadLocal("customer_gui_settings", {});
  root.innerHTML = `
  <section class="bg-white rounded-2xl shadow p-5">
    <h2 class="text-lg font-semibold">Settings</h2>
    <div class="grid md:grid-cols-2 gap-4 mt-3">
      <label class="text-sm">Brand<input id="sBrand" class="mt-1 w-full border rounded px-3 py-2" value="${saved.brand ?? cfg.brand ?? ""}"/></label>
      <label class="text-sm">Title<input id="sTitle" class="mt-1 w-full border rounded px-3 py-2" value="${saved.title ?? cfg.title ?? ""}"/></label>
      <label class="text-sm col-span-full">API Base<input id="sBase" class="mt-1 w-full border rounded px-3 py-2" value="${saved.baseUrl ?? cfg.baseUrl ?? "/api"}"/></label>
    </div>
    <div class="mt-3">
      <button id="save" class="px-3 py-1.5 rounded bg-blue-600 text-white text-sm">Save</button>
      <button id="reset" class="px-3 py-1.5 rounded bg-gray-200 text-gray-900 text-sm">Reset</button>
    </div>
    <p class="text-xs text-gray-500 mt-2">Saved values apply immediately (client-side); refresh to re-run with start-time config.</p>
  </section>`;

  const getVals = () => ({
    brand: document.getElementById("sBrand").value,
    title: document.getElementById("sTitle").value,
    baseUrl: document.getElementById("sBase").value
  });

  document.getElementById("save").onclick = ()=>{
    const v = getVals(); saveLocal("customer_gui_settings", v);
    window.GUI_CONFIG = { ...(window.GUI_CONFIG||{}), ...v };
    document.getElementById("brand").textContent = v.brand || "APGMS Normalizer";
    document.getElementById("brandFoot").textContent = v.brand || "APGMS Normalizer";
    document.getElementById("title").textContent = v.title || "Customer Portal";
    toast("Saved");
  };
  document.getElementById("reset").onclick = ()=>{
    localStorage.removeItem("customer_gui_settings"); toast("Reset");
  };
}
'@

# Start script to generate config.js at runtime
Write-Utf8Lf "$root/start.sh" @'
#!/bin/sh
set -eu
cat >/usr/share/nginx/html/config.js <<CFG
window.GUI_CONFIG = {
  brand: "${GUI_BRAND:-APGMS Normalizer}",
  title: "${GUI_TITLE:-Customer Portal}",
  baseUrl: "${GUI_BASE_URL:-/api}",
  swaggerPath: "${GUI_SWAGGER_PATH:-/api/openapi.json}",
  links: { docs: "${GUI_DOCS_LINK:-/api/docs}", prom: "/prom", nats: "/nats" },
  features: { connections: ${GUI_FEATURE_CONNECTIONS:-true}, history: ${GUI_FEATURE_HISTORY:-true}, rules: ${GUI_FEATURE_RULES:-true}, schemas: ${GUI_FEATURE_SCHEMAS:-true}, admin: ${GUI_FEATURE_ADMIN:-true} }
};
CFG
exec nginx -g "daemon off;"
'@

# Compose override (port 8088; change if desired)
Write-Utf8Lf 'docker-compose.gui.yaml' @'
services:
  gui:
    image: nginx:alpine
    depends_on:
      - normalizer
    ports:
      - "8088:80"
    environment:
      GUI_BRAND: "APGMS Normalizer"
      GUI_TITLE: "Customer Portal"
      GUI_BASE_URL: "/api"
      GUI_SWAGGER_PATH: "/api/openapi.json"
      GUI_FEATURE_CONNECTIONS: "true"
      GUI_FEATURE_HISTORY: "true"
      GUI_FEATURE_RULES: "true"
      GUI_FEATURE_SCHEMAS: "true"
      GUI_FEATURE_ADMIN: "true"
    volumes:
      - ./apps/gui:/usr/share/nginx/html
      - ./ops/nginx.gui.conf:/etc/nginx/conf.d/apgms.conf:ro
    command: /bin/sh -c "chmod +x /usr/share/nginx/html/start.sh && /usr/share/nginx/html/start.sh"
'@

# Bring it up with your main compose
$composeMain = if (Test-Path 'docker-compose.yml') { 'docker-compose.yml' } elseif (Test-Path 'docker-compose.yaml') { 'docker-compose.yaml' } else { throw 'No docker-compose file found.' }
docker compose -f $composeMain -f docker-compose.gui.yaml config | Out-Null
docker compose -f $composeMain -f docker-compose.gui.yaml up -d --force-recreate --remove-orphans
Start-Sleep -Seconds 2
Write-Host "Open: http://localhost:8088"
try { Start-Process 'http://localhost:8088' } catch {}

