import { EventEmitter } from "events";

export interface CircuitBreakerOptions {
  timeout?: number;
  errorThresholdPercentage?: number;
  resetTimeout?: number;
  volumeThreshold?: number;
  name?: string;
}

export default class CircuitBreaker<TReq = any, TResult = any> extends EventEmitter {
  constructor(action: (request: TReq) => Promise<TResult> | TResult, options?: CircuitBreakerOptions);
  fire(request: TReq): Promise<TResult>;
  on(event: "open" | "close" | "halfOpen", listener: () => void): this;
  on(event: string, listener: (...args: any[]) => void): this;
  once(event: "open" | "close" | "halfOpen", listener: () => void): this;
  once(event: string, listener: (...args: any[]) => void): this;
}
