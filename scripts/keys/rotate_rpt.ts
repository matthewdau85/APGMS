#!/usr/bin/env node
import fs from "fs";
import path from "path";

interface CliOptions {
  envPath: string;
  services: string[];
  graceDays: number;
  newKeyId?: string;
  finalize: boolean;
}

function parseArgs(argv: string[]): CliOptions {
  let envPath = path.resolve(process.cwd(), ".env");
  let graceDays = Number(process.env.RPT_ROTATION_GRACE_DAYS ?? "14");
  if (!Number.isFinite(graceDays) || graceDays <= 0) graceDays = 14;
  let finalize = false;
  const services: string[] = [];
  const positional: string[] = [];

  for (const arg of argv) {
    if (arg.startsWith("--env=")) {
      envPath = path.resolve(process.cwd(), arg.slice("--env=".length));
    } else if (arg.startsWith("--services=")) {
      services.push(...arg.slice("--services=".length).split(",").filter(Boolean));
    } else if (arg.startsWith("--grace=")) {
      const v = Number(arg.slice("--grace=".length));
      if (Number.isFinite(v) && v >= 0) graceDays = v;
    } else if (arg === "--finalize") {
      finalize = true;
    } else {
      positional.push(arg);
    }
  }

  if (!services.length && process.env.RPT_REFRESH_ENDPOINTS) {
    services.push(...process.env.RPT_REFRESH_ENDPOINTS.split(",").map((s) => s.trim()).filter(Boolean));
  }

  const newKeyId = positional[0];

  return { envPath, services, graceDays, newKeyId, finalize };
}

function parseEnvFile(content: string): Record<string, string> {
  const result: Record<string, string> = {};
  const lines = content.split(/\r?\n/);
  for (const line of lines) {
    const trimmed = line.trim();
    if (!trimmed || trimmed.startsWith("#")) continue;
    const idx = trimmed.indexOf("=");
    if (idx === -1) continue;
    const key = trimmed.slice(0, idx).trim();
    const value = trimmed.slice(idx + 1).trim();
    result[key] = value;
  }
  return result;
}

function serializeEnvFile(env: Record<string, string>, original?: string): string {
  const keys = Object.keys(env).sort();
  const lines = keys.map((key) => `${key}=${env[key]}`);
  const banner = "# Generated by scripts/keys/rotate_rpt.ts";
  return `${banner}\n${lines.join("\n")}\n`;
}

function ensureFeatureFlags(env: Record<string, string>) {
  env.FEATURE_KMS = env.FEATURE_KMS ?? "true";
  env.KMS_REGION = env.KMS_REGION ?? process.env.KMS_REGION ?? "ap-southeast-2";
}

async function writeEnvFile(envPath: string, env: Record<string, string>) {
  const serialized = serializeEnvFile(env);
  await fs.promises.writeFile(envPath, serialized, "utf8");
}

async function refreshServices(services: string[]) {
  if (!services.length) return;
  for (const base of services) {
    const target = base.endsWith("/") ? `${base}config/rpt/keys/refresh` : `${base}/config/rpt/keys/refresh`;
    try {
      const res = await fetch(target, { method: "POST" });
      if (!res.ok) {
        console.warn(`Refresh ${target} responded with ${res.status}`);
      }
    } catch (err) {
      console.warn(`Failed to refresh ${target}: ${String((err as Error)?.message ?? err)}`);
    }
  }
}

async function main() {
  const options = parseArgs(process.argv.slice(2));
  const { envPath, services, graceDays, finalize } = options;
  const envContent = await fs.promises.readFile(envPath, "utf8").catch(() => "");
  const env = parseEnvFile(envContent);

  if (finalize) {
    delete env.RPT_KMS_KEY_ID_OLD;
    env.RPT_ROTATION_GRACE_DAYS = "0";
    await writeEnvFile(envPath, env);
    await refreshServices(services);
    console.log("Rotation finalized: old key cleared.");
    return;
  }

  if (!options.newKeyId) {
    console.error("Usage: rotate_rpt.ts <new-kms-key-id> [--env=path] [--services=url1,url2] [--grace=days]");
    process.exitCode = 1;
    return;
  }

  const current = env.RPT_KMS_KEY_ID;
  if (current) {
    env.RPT_KMS_KEY_ID_OLD = current;
  }
  env.RPT_KMS_KEY_ID = options.newKeyId;
  env.RPT_ROTATION_GRACE_DAYS = String(graceDays);
  ensureFeatureFlags(env);

  await writeEnvFile(envPath, env);
  await refreshServices(services);
  console.log(`Rotation staged. Current=${env.RPT_KMS_KEY_ID} Old=${env.RPT_KMS_KEY_ID_OLD ?? "<none>"}`);
}

main().catch((err) => {
  console.error("rotate_rpt failed", err);
  process.exitCode = 1;
});
