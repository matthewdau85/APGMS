name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  build_and_smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11 (for optional repo checks)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install curl & docker-compose plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          docker --version
          docker compose version || true

      - name: Build images
        run: |
          docker compose build

      - name: Start core services (nats, normalizer, tax-engine)
        run: |
          docker compose up -d nats normalizer tax-engine

      - name: Wait for health - nats (monitoring)
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8222/healthz || true)
            if [ "$code" = "200" ]; then echo "NATS OK"; exit 0; fi
            sleep 2
          done
          echo "NATS health not OK"; docker compose logs nats; exit 1

      - name: Wait for health - normalizer
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8001/healthz || true)
            if [ "$code" = "200" ]; then echo "Normalizer OK"; exit 0; fi
            sleep 2
          done
          echo "Normalizer health not OK"; docker compose logs normalizer; exit 1

      - name: Wait for health - tax-engine
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8002/healthz || true)
            if [ "$code" = "200" ]; then echo "Tax Engine OK"; exit 0; fi
            sleep 2
          done
          echo "Tax Engine health not OK"; docker compose logs tax-engine; exit 1

      - name: Publish test message to NATS
        run: |
          set -e
          subject="apgms.tx.calculate"
          payload='{"ci":"ok","ts":"'"$(date -u +%FT%TZ)"'"}'
          net=$(docker inspect $(docker compose ps -q nats) | jq -r '.[0].NetworkSettings.Networks | keys[0]')
          echo "$payload" > payload.json
          docker run --rm --network "$net" \
            -v "$PWD/payload.json:/tmp/payload.json:ro" \
            --entrypoint sh synadia/nats-box:latest \
            -lc 'MSG=$(cat /tmp/payload.json); nats --server nats://nats:4222 pub '"$subject"' "$MSG"'
          rm -f payload.json

      - name: Tail service logs briefly
        run: |
          docker compose logs --since=2m normalizer tax-engine || true

      - name: Shutdown
        if: always()
        run: |
          docker compose down -v