class Registry {
  constructor() {
    this.contentType = "text/plain; version=0.0.4; charset=utf-8";
    this._collectors = [];
  }

  registerMetric(collector) {
    this._collectors.push(collector);
  }

  async metrics() {
    const lines = [];

    if (this._collectors.length === 0) {
      lines.push(
        "# HELP process_uptime_seconds Process uptime in seconds",
        "# TYPE process_uptime_seconds gauge",
        `process_uptime_seconds ${process.uptime()}`
      );
    } else {
      for (const collector of this._collectors) {
        if (typeof collector === "function") {
          const result = collector();
          if (Array.isArray(result)) {
            lines.push(...result.map(String));
          } else if (result != null) {
            lines.push(String(result));
          }
        } else if (collector != null) {
          lines.push(String(collector));
        }
      }
    }

    if (lines.length === 0) {
      lines.push("# HELP noop_metrics No metrics registered", "# TYPE noop_metrics gauge", "noop_metrics 0");
    }

    return lines.join("\n") + "\n";
  }
}

function collectDefaultMetrics(options = {}) {
  const { register } = options;
  if (register instanceof Registry) {
    register.registerMetric(() => [
      "# HELP nodejs_process_start_time_seconds Start time of the process since unix epoch in seconds.",
      "# TYPE nodejs_process_start_time_seconds gauge",
      `nodejs_process_start_time_seconds ${Math.round((Date.now() - process.uptime() * 1000) / 1000)}`,
      "# HELP process_uptime_seconds Process uptime in seconds",
      "# TYPE process_uptime_seconds gauge",
      `process_uptime_seconds ${process.uptime()}`
    ]);
  }
}

const client = {
  Registry,
  collectDefaultMetrics
};

client.default = client;

module.exports = client;
module.exports.Registry = Registry;
module.exports.collectDefaultMetrics = collectDefaultMetrics;
